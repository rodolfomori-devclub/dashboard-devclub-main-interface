// Script para for√ßar a exibi√ß√£o do gr√°fico de ROI
// Execute este script no console do navegador

console.log('üîß For√ßando exibi√ß√£o do gr√°fico de ROI...');

// Fun√ß√£o para verificar se o gr√°fico est√° sendo renderizado
function checkROIGraphVisibility() {
  console.log('üîç Verificando visibilidade do gr√°fico de ROI...');
  
  // Verificar se o elemento existe
  const roiGraph = document.querySelector('h2');
  let roiGraphFound = false;
  
  if (roiGraph) {
    const allHeaders = Array.from(document.querySelectorAll('h2'));
    allHeaders.forEach((header, index) => {
      if (header.textContent.includes('Faturamento x Investimento')) {
        roiGraphFound = true;
        console.log(`‚úÖ Gr√°fico de ROI encontrado na posi√ß√£o ${index + 1}`);
        
        // Verificar se o container est√° vis√≠vel
        const container = header.closest('.bg-white, .bg-gray-800');
        if (container) {
          const computedStyle = window.getComputedStyle(container);
          console.log('üìä Estilo do container:');
          console.log('  - Display:', computedStyle.display);
          console.log('  - Visibility:', computedStyle.visibility);
          console.log('  - Opacity:', computedStyle.opacity);
          console.log('  - Height:', computedStyle.height);
          
          if (computedStyle.display === 'none') {
            console.log('‚ùå Container est√° com display: none');
          } else {
            console.log('‚úÖ Container est√° vis√≠vel');
          }
        }
      }
    });
  }
  
  if (!roiGraphFound) {
    console.log('‚ùå Gr√°fico de ROI n√£o encontrado na p√°gina');
  }
  
  return roiGraphFound;
}

// Fun√ß√£o para for√ßar a exibi√ß√£o do gr√°fico
function forceROIDisplay() {
  console.log('üîß For√ßando exibi√ß√£o do gr√°fico de ROI...');
  
  // Verificar se temos dados de ROI
  if (!window.roiData || window.roiData.length === 0) {
    console.log('‚ùå N√£o h√° dados de ROI para exibir');
    return false;
  }
  
  console.log('‚úÖ Dados de ROI encontrados:', window.roiData.length, 'lan√ßamentos');
  
  // Verificar se o gr√°fico j√° existe
  const existingGraph = document.querySelector('h2');
  let graphExists = false;
  
  if (existingGraph) {
    const allHeaders = Array.from(document.querySelectorAll('h2'));
    allHeaders.forEach(header => {
      if (header.textContent.includes('Faturamento x Investimento')) {
        graphExists = true;
        console.log('‚úÖ Gr√°fico j√° existe na p√°gina');
      }
    });
  }
  
  if (!graphExists) {
    console.log('‚ùå Gr√°fico n√£o encontrado, criando manualmente...');
    
    // Criar o gr√°fico manualmente
    const graphContainer = document.createElement('div');
    graphContainer.className = 'bg-white dark:bg-gray-800 p-6 rounded-lg shadow mb-6';
    graphContainer.style.border = '2px solid red';
    graphContainer.innerHTML = `
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold text-text-light dark:text-text-dark">
          Faturamento x Investimento em Tr√°fego (FOR√áADO)
        </h2>
      </div>
      <div style="height: 400px; background: #f0f0f0; display: flex; align-items: center; justify-content: center;">
        <p>Gr√°fico de ROI - Dados dispon√≠veis: ${window.roiData.length} lan√ßamentos</p>
      </div>
      <div class="mt-6 grid grid-cols-1 md:grid-cols-4 gap-4">
        <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
          <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">ROI M√©dio</h3>
          <p class="text-2xl font-bold text-green-600">
            ${(window.roiData.reduce((sum, item) => sum + item.roi, 0) / window.roiData.length).toFixed(1)}%
          </p>
        </div>
        <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
          <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">ROAS M√©dio</h3>
          <p class="text-2xl font-bold text-blue-600">
            ${(window.roiData.reduce((sum, item) => sum + item.roas, 0) / window.roiData.length).toFixed(2)}x
          </p>
        </div>
        <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
          <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Melhor ROI</h3>
          <p class="text-2xl font-bold text-green-600">
            ${Math.max(...window.roiData.map(item => item.roi)).toFixed(1)}%
          </p>
        </div>
        <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
          <h3 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Lan√ßamentos Lucrativos</h3>
          <p class="text-2xl font-bold text-green-600">
            ${window.roiData.filter(item => item.roi > 0).length}/${window.roiData.length}
          </p>
        </div>
      </div>
    `;
    
    // Inserir o gr√°fico na p√°gina
    const mainContainer = document.querySelector('.max-w-7xl');
    if (mainContainer) {
      // Inserir ap√≥s o gr√°fico de tr√°fego
      const trafficGraph = mainContainer.querySelector('h2');
      if (trafficGraph && trafficGraph.textContent.includes('Gasto em Tr√°fego')) {
        const trafficContainer = trafficGraph.closest('.bg-white, .bg-gray-800');
        if (trafficContainer) {
          trafficContainer.parentNode.insertBefore(graphContainer, trafficContainer.nextSibling);
          console.log('‚úÖ Gr√°fico de ROI inserido ap√≥s o gr√°fico de tr√°fego');
        }
      } else {
        mainContainer.appendChild(graphContainer);
        console.log('‚úÖ Gr√°fico de ROI inserido no final da p√°gina');
      }
    } else {
      document.body.appendChild(graphContainer);
      console.log('‚úÖ Gr√°fico de ROI inserido no body');
    }
  }
  
  return true;
}

// Fun√ß√£o para mostrar detalhes dos dados de ROI
function showROIDetails() {
  console.log('üìä Detalhes dos dados de ROI:');
  
  if (!window.roiData || window.roiData.length === 0) {
    console.log('‚ùå Nenhum dado de ROI dispon√≠vel');
    return;
  }
  
  window.roiData.forEach((item, index) => {
    console.log(`${index + 1}. ${item.name}:`);
    console.log(`   - Faturamento: R$ ${item.revenue.toFixed(2)}`);
    console.log(`   - Investimento: R$ ${item.traffic.toFixed(2)}`);
    console.log(`   - ROI: ${item.roiFormatted}`);
    console.log(`   - ROAS: ${item.roasFormatted}`);
  });
  
  // Calcular estat√≠sticas
  const avgROI = window.roiData.reduce((sum, item) => sum + item.roi, 0) / window.roiData.length;
  const avgROAS = window.roiData.reduce((sum, item) => sum + item.roas, 0) / window.roiData.length;
  const maxROI = Math.max(...window.roiData.map(item => item.roi));
  const profitableCount = window.roiData.filter(item => item.roi > 0).length;
  
  console.log('\nüìà Estat√≠sticas:');
  console.log(`  - ROI M√©dio: ${avgROI.toFixed(1)}%`);
  console.log(`  - ROAS M√©dio: ${avgROAS.toFixed(2)}x`);
  console.log(`  - Melhor ROI: ${maxROI.toFixed(1)}%`);
  console.log(`  - Lan√ßamentos Lucrativos: ${profitableCount}/${window.roiData.length}`);
}

// Fun√ß√£o para verificar se o React est√° renderizando corretamente
function checkReactRendering() {
  console.log('‚öõÔ∏è Verificando renderiza√ß√£o do React...');
  
  // Verificar se o estado est√° sendo atualizado
  if (window.roiData) {
    console.log('‚úÖ Estado roiData est√° definido');
    console.log('üìä N√∫mero de itens:', window.roiData.length);
    
    // Verificar se o React est√° detectando a mudan√ßa
    const reactRoot = document.querySelector('#root');
    if (reactRoot) {
      console.log('‚úÖ React root encontrado');
      
      // For√ßar re-renderiza√ß√£o
      const event = new Event('resize');
      window.dispatchEvent(event);
      console.log('üîÑ Evento de resize disparado para for√ßar re-renderiza√ß√£o');
    }
  } else {
    console.log('‚ùå Estado roiData n√£o est√° definido');
  }
}

// Executar verifica√ß√µes
console.log(`
üß™ INSTRU√á√ïES DE TESTE:

1. Verificar visibilidade do gr√°fico:
   - Execute: checkROIGraphVisibility()

2. For√ßar exibi√ß√£o do gr√°fico:
   - Execute: forceROIDisplay()

3. Mostrar detalhes dos dados:
   - Execute: showROIDetails()

4. Verificar renderiza√ß√£o do React:
   - Execute: checkReactRendering()

5. Executar todas as verifica√ß√µes:
   - Execute: runAllForceChecks()
`);

// Fun√ß√£o para executar todas as verifica√ß√µes
function runAllForceChecks() {
  console.log('üß™ Executando todas as verifica√ß√µes de for√ßa...');
  
  console.log('\n=== VERIFICA√á√ÉO 1: Visibilidade ===');
  checkROIGraphVisibility();
  
  console.log('\n=== VERIFICA√á√ÉO 2: For√ßar exibi√ß√£o ===');
  forceROIDisplay();
  
  console.log('\n=== VERIFICA√á√ÉO 3: Detalhes ===');
  showROIDetails();
  
  console.log('\n=== VERIFICA√á√ÉO 4: React ===');
  checkReactRendering();
  
  console.log('\n‚úÖ Todas as verifica√ß√µes conclu√≠das!');
}

// Executar verifica√ß√£o inicial
checkROIGraphVisibility(); 