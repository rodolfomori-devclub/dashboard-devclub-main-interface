// Script para verificar o status dos dados de ROI
// Execute este script no console do navegador

console.log('üîç Verificando status dos dados de ROI...');

// Fun√ß√£o para verificar se os dados est√£o dispon√≠veis
function checkROIStatus() {
  console.log('üìä Verificando dados dispon√≠veis...');
  
  // Verificar dados de tr√°fego
  if (window.processedData && window.processedData.trafficByLaunch) {
    console.log('‚úÖ Dados de tr√°fego encontrados:', window.processedData.trafficByLaunch.length, 'lan√ßamentos');
    console.log('üìã Primeiros 3 lan√ßamentos com tr√°fego:');
    window.processedData.trafficByLaunch.slice(0, 3).forEach(item => {
      console.log(`  - ${item.name}: R$ ${item.traffic.toFixed(2)}`);
    });
  } else {
    console.log('‚ùå Dados de tr√°fego n√£o encontrados');
    console.log('üí° Verifique se os dados foram carregados corretamente');
  }
  
  // Verificar dados de faturamento
  if (window.revenueData && window.revenueData.length > 0) {
    console.log('‚úÖ Dados de faturamento encontrados:', window.revenueData.length, 'lan√ßamentos');
    console.log('üìã Primeiros 3 lan√ßamentos com faturamento:');
    window.revenueData.slice(0, 3).forEach(item => {
      console.log(`  - ${item.launch}: R$ ${item.revenue.toFixed(2)}`);
    });
  } else {
    console.log('‚ùå Dados de faturamento n√£o encontrados');
    console.log('üí° Clique em "üí∞ Buscar Faturamento" para carregar os dados');
  }
  
  // Verificar dados de ROI
  if (window.roiData && window.roiData.length > 0) {
    console.log('‚úÖ Dados de ROI encontrados:', window.roiData.length, 'lan√ßamentos');
    console.log('üìã Primeiros 3 lan√ßamentos com ROI:');
    window.roiData.slice(0, 3).forEach(item => {
      console.log(`  - ${item.name}: ROI ${item.roiFormatted}, ROAS ${item.roasFormatted}`);
    });
  } else {
    console.log('‚ùå Dados de ROI n√£o encontrados');
    console.log('üí° Os dados de ROI s√£o calculados quando h√° dados de faturamento E tr√°fego');
  }
}

// Fun√ß√£o para verificar se o gr√°fico est√° sendo renderizado
function checkROIGraphRendering() {
  console.log('üé® Verificando renderiza√ß√£o do gr√°fico de ROI...');
  
  const graphHeaders = Array.from(document.querySelectorAll('h2'));
  let roiGraphFound = false;
  
  graphHeaders.forEach(header => {
    if (header.textContent.includes('Faturamento x Investimento')) {
      roiGraphFound = true;
      console.log('‚úÖ Gr√°fico de ROI encontrado na p√°gina');
    }
  });
  
  if (!roiGraphFound) {
    console.log('‚ùå Gr√°fico de ROI n√£o encontrado na p√°gina');
    console.log('üí° Poss√≠veis causas:');
    console.log('   - Dados de faturamento n√£o carregados');
    console.log('   - Dados de tr√°fego n√£o carregados');
    console.log('   - Nenhum lan√ßamento com dados completos');
  }
}

// Fun√ß√£o para simular o carregamento de dados
function simulateDataLoading() {
  console.log('üß™ Simulando carregamento de dados...');
  
  // Simular dados de tr√°fego
  const mockTrafficData = [
    { name: 'LF 15', traffic: 20000 },
    { name: 'LF 20', traffic: 25000 },
    { name: 'LF 25', traffic: 30000 }
  ];
  
  // Simular dados de faturamento
  const mockRevenueData = [
    { launch: 'LF 15', revenue: 50000 },
    { launch: 'LF 20', revenue: 35000 },
    { launch: 'LF 25', revenue: 28000 }
  ];
  
  // Calcular ROI e ROAS
  const mockROIData = mockRevenueData.map(revenueItem => {
    const trafficItem = mockTrafficData.find(t => t.name === revenueItem.launch);
    if (trafficItem) {
      const roi = ((revenueItem.revenue - trafficItem.traffic) / trafficItem.traffic) * 100;
      const roas = revenueItem.revenue / trafficItem.traffic;
      return {
        name: revenueItem.launch,
        revenue: revenueItem.revenue,
        traffic: trafficItem.traffic,
        roi: roi,
        roiFormatted: `${roi > 0 ? '+' : ''}${roi.toFixed(1)}%`,
        roas: roas,
        roasFormatted: `${roas.toFixed(2)}x`
      };
    }
    return null;
  }).filter(item => item !== null);
  
  console.log('üìä Dados simulados criados:');
  mockROIData.forEach(item => {
    console.log(`  - ${item.name}: ROI ${item.roiFormatted}, ROAS ${item.roasFormatted}`);
  });
  
  return mockROIData;
}

// Fun√ß√£o para verificar correspond√™ncia entre dados
function checkDataMatching() {
  console.log('üîç Verificando correspond√™ncia entre dados...');
  
  if (!window.processedData?.trafficByLaunch || !window.revenueData) {
    console.log('‚ùå Dados insuficientes para verificar correspond√™ncia');
    return;
  }
  
  const trafficLaunches = window.processedData.trafficByLaunch.map(t => t.name);
  const revenueLaunches = window.revenueData.map(r => r.launch);
  
  console.log('üìã Lan√ßamentos com dados de tr√°fego:', trafficLaunches);
  console.log('üìã Lan√ßamentos com dados de faturamento:', revenueLaunches);
  
  const matchingLaunches = trafficLaunches.filter(t => revenueLaunches.includes(t));
  console.log('‚úÖ Lan√ßamentos com dados completos:', matchingLaunches);
  
  if (matchingLaunches.length === 0) {
    console.log('‚ùå Nenhum lan√ßamento com dados completos encontrado');
    console.log('üí° Verifique se os nomes dos lan√ßamentos coincidem');
  } else {
    console.log(`‚úÖ ${matchingLaunches.length} lan√ßamentos podem gerar dados de ROI`);
  }
}

// Executar verifica√ß√µes
console.log(`
üß™ INSTRU√á√ïES DE TESTE:

1. Verificar status dos dados:
   - Execute: checkROIStatus()

2. Verificar renderiza√ß√£o do gr√°fico:
   - Execute: checkROIGraphRendering()

3. Verificar correspond√™ncia entre dados:
   - Execute: checkDataMatching()

4. Simular dados:
   - Execute: simulateDataLoading()

5. Executar todas as verifica√ß√µes:
   - Execute: runAllROIStatusChecks()
`);

// Fun√ß√£o para executar todas as verifica√ß√µes
function runAllROIStatusChecks() {
  console.log('üß™ Executando todas as verifica√ß√µes de status do ROI...');
  
  console.log('\n=== VERIFICA√á√ÉO 1: Status dos dados ===');
  checkROIStatus();
  
  console.log('\n=== VERIFICA√á√ÉO 2: Renderiza√ß√£o ===');
  checkROIGraphRendering();
  
  console.log('\n=== VERIFICA√á√ÉO 3: Correspond√™ncia ===');
  checkDataMatching();
  
  console.log('\n=== VERIFICA√á√ÉO 4: Simula√ß√£o ===');
  simulateDataLoading();
  
  console.log('\n‚úÖ Todas as verifica√ß√µes conclu√≠das!');
}

// Executar verifica√ß√£o inicial
checkROIStatus(); 