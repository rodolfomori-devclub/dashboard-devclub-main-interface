// Script para testar o gr√°fico de gasto em tr√°fego da planilha principal
// Execute este script no console do navegador

console.log('üö¶ Testando gr√°fico de gasto em tr√°fego da planilha principal...');

// Fun√ß√£o para verificar dados de tr√°fego da planilha principal
function checkMainSheetTrafficData() {
  console.log('üìä Verificando dados de tr√°fego da planilha principal...');
  
  if (!processedData || !processedData.trafficByLaunch) {
    console.log('‚ùå Dados de tr√°fego n√£o encontrados');
    return;
  }
  
  console.log('‚úÖ Dados de tr√°fego encontrados:', processedData.trafficByLaunch);
  console.log(`üìä Total de lan√ßamentos com dados de tr√°fego: ${processedData.trafficByLaunch.length}`);
  
  if (processedData.trafficByLaunch.length > 0) {
    console.log('üìã Estrutura do primeiro item:');
    const firstItem = processedData.trafficByLaunch[0];
    console.log(firstItem);
    
    // Mostrar dados dos primeiros 10 lan√ßamentos
    console.log('üìä Primeiros 10 lan√ßamentos:');
    processedData.trafficByLaunch.slice(0, 10).forEach((item, index) => {
      console.log(`  ${index + 1}. ${item.name}: R$ ${item.traffic.toFixed(2)}`);
    });
    
    // Calcular estat√≠sticas
    const totalTraffic = processedData.trafficByLaunch.reduce((sum, item) => sum + item.traffic, 0);
    const avgTraffic = totalTraffic / processedData.trafficByLaunch.length;
    const maxTraffic = Math.max(...processedData.trafficByLaunch.map(item => item.traffic));
    const minTraffic = Math.min(...processedData.trafficByLaunch.map(item => item.traffic));
    
    console.log('\nüìà Estat√≠sticas de gasto em tr√°fego:');
    console.log(`  Total gasto: R$ ${totalTraffic.toFixed(2)}`);
    console.log(`  M√©dia por LF: R$ ${avgTraffic.toFixed(2)}`);
    console.log(`  Maior gasto: R$ ${maxTraffic.toFixed(2)}`);
    console.log(`  Menor gasto: R$ ${minTraffic.toFixed(2)}`);
  }
}

// Fun√ß√£o para verificar se o gr√°fico est√° sendo renderizado
function checkTrafficExpenseGraphRendering() {
  console.log('üé® Verificando renderiza√ß√£o do gr√°fico de gasto em tr√°fego...');
  
  // Verificar se o elemento do gr√°fico existe
  const graphContainer = document.querySelector('h2');
  let trafficGraphFound = false;
  
  if (graphContainer) {
    const allHeaders = Array.from(document.querySelectorAll('h2'));
    allHeaders.forEach(header => {
      if (header.textContent.includes('Gasto em Tr√°fego')) {
        trafficGraphFound = true;
        console.log('‚úÖ Gr√°fico de gasto em tr√°fego encontrado na p√°gina');
      }
    });
  }
  
  if (!trafficGraphFound) {
    console.log('‚ùå Gr√°fico de gasto em tr√°fego n√£o encontrado na p√°gina');
    console.log('üí° Verifique se os dados de tr√°fego est√£o sendo processados corretamente');
  }
}

// Fun√ß√£o para verificar dados brutos da planilha principal
function checkRawMainSheetData() {
  console.log('üìã Verificando dados brutos da planilha principal...');
  
  if (!allLaunchesData || !allLaunchesData.launches) {
    console.log('‚ùå Dados de lan√ßamentos n√£o encontrados');
    return;
  }
  
  const launchesWithTraffic = [];
  
  allLaunchesData.launches.forEach(launch => {
    const trafficValue = launch['Tr√°fego'] || launch['Trafico'] || launch['tr√°fego'] || launch['trafico'];
    
    if (trafficValue) {
      // Converter valor monet√°rio para n√∫mero
      let numericValue = 0;
      
      if (typeof trafficValue === 'string') {
        const cleanValue = trafficValue.replace(/[R$\s.]/g, '').replace(',', '.');
        numericValue = parseFloat(cleanValue);
      } else if (typeof trafficValue === 'number') {
        numericValue = trafficValue;
      }
      
      if (!isNaN(numericValue) && numericValue > 0) {
        launchesWithTraffic.push({
          launch: launch['Lan√ßamento'],
          rawValue: trafficValue,
          numericValue: numericValue
        });
      }
    }
  });
  
  console.log(`üìä Lan√ßamentos com dados de tr√°fego na planilha principal: ${launchesWithTraffic.length}`);
  
  if (launchesWithTraffic.length > 0) {
    console.log('‚úÖ Primeiros 10 lan√ßamentos com dados de tr√°fego:');
    launchesWithTraffic.slice(0, 10).forEach(item => {
      console.log(`  - ${item.launch}: "${item.rawValue}" ‚Üí R$ ${item.numericValue.toFixed(2)}`);
    });
  } else {
    console.log('‚ùå Nenhum lan√ßamento com dados de tr√°fego encontrado na planilha principal');
  }
  
  return launchesWithTraffic;
}

// Fun√ß√£o para simular dados de tr√°fego
function simulateTrafficExpenseData() {
  console.log('üß™ Simulando dados de gasto em tr√°fego...');
  
  const simulatedData = [
    {
      name: 'LF 15',
      traffic: 20000,
      trafficFormatted: 'R$ 20.000,00'
    },
    {
      name: 'LF 20',
      traffic: 25000,
      trafficFormatted: 'R$ 25.000,00'
    },
    {
      name: 'LF 25',
      traffic: 30000,
      trafficFormatted: 'R$ 30.000,00'
    }
  ];
  
  console.log('üìä Dados simulados:', simulatedData);
  
  // Verificar se os dados est√£o no formato correto
  const isValid = simulatedData.every(item => 
    item.name && 
    typeof item.traffic === 'number' &&
    item.traffic > 0 &&
    item.trafficFormatted
  );
  
  if (isValid) {
    console.log('‚úÖ Dados simulados est√£o no formato correto');
  } else {
    console.log('‚ùå Dados simulados t√™m formato incorreto');
  }
  
  return simulatedData;
}

// Fun√ß√£o para formatar valor monet√°rio
function formatCurrency(value) {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL',
    minimumFractionDigits: 2
  }).format(value || 0);
}

// Executar verifica√ß√µes
console.log(`
üß™ INSTRU√á√ïES DE TESTE:

1. Verificar dados de tr√°fego processados:
   - Execute: checkMainSheetTrafficData()

2. Verificar renderiza√ß√£o do gr√°fico:
   - Execute: checkTrafficExpenseGraphRendering()

3. Verificar dados brutos da planilha principal:
   - Execute: checkRawMainSheetData()

4. Simular dados de tr√°fego:
   - Execute: simulateTrafficExpenseData()

5. Executar todas as verifica√ß√µes:
   - Execute: runAllTrafficExpenseTests()
`);

// Fun√ß√£o para executar todas as verifica√ß√µes
function runAllTrafficExpenseTests() {
  console.log('üß™ Executando todas as verifica√ß√µes do gr√°fico de gasto em tr√°fego...');
  
  console.log('\n=== VERIFICA√á√ÉO 1: Dados processados ===');
  checkMainSheetTrafficData();
  
  console.log('\n=== VERIFICA√á√ÉO 2: Renderiza√ß√£o ===');
  checkTrafficExpenseGraphRendering();
  
  console.log('\n=== VERIFICA√á√ÉO 3: Dados brutos ===');
  checkRawMainSheetData();
  
  console.log('\n=== VERIFICA√á√ÉO 4: Simula√ß√£o ===');
  simulateTrafficExpenseData();
  
  console.log('\n‚úÖ Todas as verifica√ß√µes conclu√≠das!');
}

// Executar verifica√ß√£o inicial
if (processedData && processedData.trafficByLaunch) {
  checkMainSheetTrafficData();
} else {
  console.log('üí° Para testar, primeiro carregue os dados na p√°gina de Lead Scoring');
} 