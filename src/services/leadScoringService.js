import axios from 'axios';

const MAIN_SHEET_ID = '1kLgVsNcc8OmPMvxaTN7KM0cTB5hC0KtL02lSZMYRHBw';
const API_KEY = 'AIzaSyDefktRla6Q-o9k-yfKaLxW1nFMgAJfDt8';
const MAIN_RANGE = 'A:Z';
const LF_PESQUISA_RANGE = "'[LF] Pesquisa'!A:AI";

const cache = new Map();
const CACHE_DURATION = 5 * 60 * 1000;

function extractSheetId(url) {
  const match = url.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
  return match ? match[1] : null;
}

export const leadScoringService = {
  async fetchMainSheetData() {
    const cacheKey = 'mainSheet';
    const cached = cache.get(cacheKey);
    
    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
      return cached.data;
    }

    try {
      const url = `https://sheets.googleapis.com/v4/spreadsheets/${MAIN_SHEET_ID}/values/${MAIN_RANGE}?key=${API_KEY}`;
      const response = await axios.get(url);
      
      if (!response.data.values || response.data.values.length === 0) {
        throw new Error('Nenhum dado encontrado na planilha principal');
      }

      const headers = response.data.values[0];
      const rows = response.data.values.slice(1);
      
      const data = rows.map(row => {
        const obj = {};
        headers.forEach((header, index) => {
          obj[header] = row[index] || '';
        });
        return obj;
      });

      const result = {
        headers,
        data,
        totalLaunches: data.length,
        lastUpdate: new Date().toISOString()
      };

      cache.set(cacheKey, {
        data: result,
        timestamp: Date.now()
      });

      return result;
    } catch (error) {
      console.error('Erro ao buscar dados da planilha principal:', error);
      throw error;
    }
  },

  async fetchSheetData(sheetUrl, launchName) {
    const sheetId = extractSheetId(sheetUrl);
    if (!sheetId) {
      console.warn(`ID da planilha n√£o encontrado para ${launchName}:`, sheetUrl);
      return null;
    }

    const cacheKey = `sheet_${sheetId}`;
    const cached = cache.get(cacheKey);
    
    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
      return cached.data;
    }

    try {
      const url = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${LF_PESQUISA_RANGE}?key=${API_KEY}`;
      const response = await axios.get(url);
      
      if (!response.data.values || response.data.values.length === 0) {
        console.warn(`Nenhum dado encontrado na aba [LF] Pesquisa para ${launchName}`);
        return null;
      }

      const headers = response.data.values[0];
      const rows = response.data.values.slice(1);
      
      console.log(`üìä Headers carregados para ${launchName}:`, headers);
      console.log(`üìä Total de colunas: ${headers.length}`);
      console.log(`üìä √öltimas 10 colunas:`, headers.slice(-10));
      
      const data = rows.map(row => {
        const obj = {
          launch: launchName
        };
        headers.forEach((header, index) => {
          obj[header] = row[index] || '';
        });
        return obj;
      });

      const result = {
        launchName,
        sheetId,
        headers,
        data,
        totalRows: data.length
      };

      cache.set(cacheKey, {
        data: result,
        timestamp: Date.now()
      });

      return result;
    } catch (error) {
      console.error(`Erro ao buscar dados da planilha ${launchName}:`, error);
      return null;
    }
  },

  async fetchAllLaunchesData(onProgress, limit = null) {
    try {
      const mainData = await this.fetchMainSheetData();
      
      let launchesToProcess = [...mainData.data];
      if (limit) {
        launchesToProcess.sort((a, b) => {
          const getNum = (name) => {
            const match = name.match(/(\d+)/);
            return match ? parseInt(match[1]) : 0;
          };
          const numA = getNum(a['Lan√ßamento']);
          const numB = getNum(b['Lan√ßamento']);
          return numB - numA;
        });
        
        launchesToProcess = launchesToProcess.slice(0, limit);
      }
      
      const allLaunchesData = [];
      const errors = [];
      
      for (let i = 0; i < launchesToProcess.length; i++) {
        const launch = launchesToProcess[i];
        const sheetUrl = launch['Link Planilha'];
        const launchName = launch['Lan√ßamento'];
        
        if (onProgress) {
          onProgress({
            current: i + 1,
            total: launchesToProcess.length,
            launchName
          });
        }
        
        if (sheetUrl && sheetUrl.includes('docs.google.com/spreadsheets')) {
          const launchData = await this.fetchSheetData(sheetUrl, launchName);
          if (launchData) {
            allLaunchesData.push({
              ...launch,
              sheetData: launchData
            });
          } else {
            errors.push({
              launchName,
              error: 'N√£o foi poss√≠vel carregar os dados'
            });
          }
        } else {
          allLaunchesData.push({
            ...launch,
            sheetData: null
          });
          errors.push({
            launchName,
            error: 'Link da planilha inv√°lido ou n√£o fornecido'
          });
        }
        
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      return {
        launches: allLaunchesData,
        errors,
        totalLaunches: allLaunchesData.length,
        lastUpdate: new Date().toISOString()
      };
    } catch (error) {
      console.error('Erro ao buscar dados de todos os lan√ßamentos:', error);
      throw error;
    }
  },

  processDataForCharts(allLaunchesData) {
    const aggregatedData = {
      totalLeads: 0,
      leadsByLaunch: [],
      leadsByDate: {},
      leadsBySource: {},
      conversionByLaunch: [],
      genderByLaunch: [],
      ageByLaunch: [],
      currentJobByLaunch: [],
      salaryRangeByLaunch: [],
      creditCardByLaunch: [],
      programmingStudyByLaunch: [],
      collegeByLaunch: [],
      onlineCourseByLaunch: [],
      programmingInterestByLaunch: [],
      eventInterestByLaunch: [],
      computerByLaunch: [],
      faixaByLaunch: [],
      trafficByLaunch: []
    };

    allLaunchesData.launches.forEach((launch) => {
      if (launch.sheetData && launch.sheetData.data) {
        const launchLeadsCount = launch.sheetData.totalRows;
        aggregatedData.totalLeads += launchLeadsCount;
        
        aggregatedData.leadsByLaunch.push({
          name: launch['Lan√ßamento'],
          leads: launchLeadsCount,
          startDate: launch['In√≠cio Capta√ß√£o'],
          endDate: launch['Fim Capta√ß√£o']
        });

        let masculino = 0;
        let feminino = 0;
        let outros = 0;

        launch.sheetData.data.forEach(lead => {
          const genderFields = ['O seu g√™nero:', 'O seu g√™nero', 'Sexo', 'sexo', 'G√™nero', 'g√™nero', 'Gender', 'gender', 'Genero', 'genero'];
          const genderField = genderFields.find(field => launch.sheetData.headers.includes(field));
          
          if (genderField && lead[genderField]) {
            const gender = lead[genderField].toLowerCase().trim();
            if (gender === 'masculino' || gender === 'homem' || gender === 'm' || gender === 'male' || gender.includes('masculino') || gender.includes('homem')) {
              masculino++;
            } else if (gender === 'feminino' || gender === 'mulher' || gender === 'f' || gender === 'female' || gender.includes('feminino') || gender.includes('mulher')) {
              feminino++;
            } else {
              outros++;
            }
          }

          const dateFields = ['Data', 'data', 'Date', 'Timestamp', 'timestamp'];
          const dateField = dateFields.find(field => lead[field]);
          if (dateField && lead[dateField]) {
            const date = new Date(lead[dateField]).toLocaleDateString('pt-BR');
            aggregatedData.leadsByDate[date] = (aggregatedData.leadsByDate[date] || 0) + 1;
          }

          const sourceFields = ['Fonte', 'fonte', 'Source', 'source', 'Canal', 'canal'];
          const sourceField = sourceFields.find(field => lead[field]);
          if (sourceField && lead[sourceField]) {
            const source = lead[sourceField];
            aggregatedData.leadsBySource[source] = (aggregatedData.leadsBySource[source] || 0) + 1;
          }
        });

        const total = masculino + feminino + outros;
        
        if (total > 0) {
          aggregatedData.genderByLaunch.push({
            name: launch['Lan√ßamento'],
            masculino: Number(((masculino / total) * 100).toFixed(1)),
            feminino: Number(((feminino / total) * 100).toFixed(1)),
            outros: Number(((outros / total) * 100).toFixed(1)),
            totalLeads: total
          });
        }

        let ageGroups = {
          '18-24': 0,
          '25-34': 0,
          '35-44': 0,
          '45-54': 0,
          '55+': 0
        };

        launch.sheetData.data.forEach(lead => {
          const ageFields = ['Qual a sua idade?', 'Qual a sua idade', 'Idade', 'idade', 'Age', 'age'];
          const ageField = ageFields.find(field => launch.sheetData.headers.includes(field));
          
          if (ageField && lead[ageField]) {
            const age = parseInt(lead[ageField]);
            if (!isNaN(age)) {
              if (age >= 18 && age <= 24) {
                ageGroups['18-24']++;
              } else if (age >= 25 && age <= 34) {
                ageGroups['25-34']++;
              } else if (age >= 35 && age <= 44) {
                ageGroups['35-44']++;
              } else if (age >= 45 && age <= 54) {
                ageGroups['45-54']++;
              } else if (age >= 55) {
                ageGroups['55+']++;
              }
            }
          }
        });

        const totalAge = Object.values(ageGroups).reduce((sum, count) => sum + count, 0);
        
        if (totalAge > 0) {
          aggregatedData.ageByLaunch.push({
            name: launch['Lan√ßamento'],
            '18-24': Number(((ageGroups['18-24'] / totalAge) * 100).toFixed(1)),
            '25-34': Number(((ageGroups['25-34'] / totalAge) * 100).toFixed(1)),
            '35-44': Number(((ageGroups['35-44'] / totalAge) * 100).toFixed(1)),
            '45-54': Number(((ageGroups['45-54'] / totalAge) * 100).toFixed(1)),
            '55+': Number(((ageGroups['55+'] / totalAge) * 100).toFixed(1)),
            totalLeads: totalAge
          });
        }

        const currentJobData = this.processCategoricalData(launch, 'O que voc√™ faz atualmente?', 'O que voc√™ faz atualmente', 'Profiss√£o', 'profiss√£o', 'Trabalho', 'trabalho');
        if (currentJobData.total > 0) {
          aggregatedData.currentJobByLaunch.push({
            name: launch['Lan√ßamento'],
            ...currentJobData.percentages,
            totalLeads: currentJobData.total
          });
        }

        const salaryData = this.processCategoricalData(launch, 'Atualmente, qual a sua faixa salarial?', 'Atualmente, qual a sua faixa salarial', 'Faixa salarial', 'faixa salarial', 'Sal√°rio', 'sal√°rio');
        if (salaryData.total > 0) {
          aggregatedData.salaryRangeByLaunch.push({
            name: launch['Lan√ßamento'],
            ...salaryData.percentages,
            totalLeads: salaryData.total
          });
        }

        const creditCardData = this.processCategoricalData(launch, 'Voc√™ possui cart√£o de cr√©dito?', 'Voc√™ possui cart√£o de cr√©dito', 'Cart√£o de cr√©dito', 'cart√£o de cr√©dito', 'Cart√£o', 'cart√£o');
        if (creditCardData.total > 0) {
          aggregatedData.creditCardByLaunch.push({
            name: launch['Lan√ßamento'],
            ...creditCardData.percentages,
            totalLeads: creditCardData.total
          });
        }

        const programmingStudyData = this.processCategoricalData(launch, 'J√° estudou programa√ß√£o?', 'J√° estudou programa√ß√£o', 'Estudou programa√ß√£o', 'estudou programa√ß√£o', 'Programa√ß√£o', 'programa√ß√£o');
        if (programmingStudyData.total > 0) {
          aggregatedData.programmingStudyByLaunch.push({
            name: launch['Lan√ßamento'],
            ...programmingStudyData.percentages,
            totalLeads: programmingStudyData.total
          });
        }

        const collegeData = this.processCategoricalData(launch, 'Voc√™ j√° fez/faz/pretende fazer faculdade?', 'Voc√™ j√° fez/faz/pretende fazer faculdade', 'Faculdade', 'faculdade', 'Ensino superior', 'ensino superior');
        if (collegeData.total > 0) {
          aggregatedData.collegeByLaunch.push({
            name: launch['Lan√ßamento'],
            ...collegeData.percentages,
            totalLeads: collegeData.total
          });
        }

        const onlineCourseData = this.processCategoricalData(launch, 'J√° investiu em algum curso online para aprender uma nova forma de ganhar dinheiro?', 'J√° investiu em algum curso online para aprender uma nova forma de ganhar dinheiro', 'Curso online', 'curso online', 'Investimento curso', 'investimento curso');
        if (onlineCourseData.total > 0) {
          aggregatedData.onlineCourseByLaunch.push({
            name: launch['Lan√ßamento'],
            ...onlineCourseData.percentages,
            totalLeads: onlineCourseData.total
          });
        }

        const programmingInterestData = this.processCategoricalData(launch, 'O que mais te chama aten√ß√£o na profiss√£o de Programador?', 'O que mais te chama aten√ß√£o na profiss√£o de Programador', 'Interesse programa√ß√£o', 'interesse programa√ß√£o', 'Programador', 'programador');
        if (programmingInterestData.total > 0) {
          aggregatedData.programmingInterestByLaunch.push({
            name: launch['Lan√ßamento'],
            ...programmingInterestData.percentages,
            totalLeads: programmingInterestData.total
          });
        }

        const eventInterestData = this.processCategoricalData(launch, 'O que mais voc√™ quer ver no evento?', 'O que mais voc√™ quer ver no evento', 'Interesse evento', 'interesse evento', 'Evento', 'evento');
        if (eventInterestData.total > 0) {
          aggregatedData.eventInterestByLaunch.push({
            name: launch['Lan√ßamento'],
            ...eventInterestData.percentages,
            totalLeads: eventInterestData.total
          });
        }

        const computerData = this.processCategoricalData(launch, 'Tem computador/notebook?', 'Tem computador/notebook', 'Computador', 'computador', 'Notebook', 'notebook');
        if (computerData.total > 0) {
          aggregatedData.computerByLaunch.push({
            name: launch['Lan√ßamento'],
            ...computerData.percentages,
            totalLeads: computerData.total
          });
        }

        const faixaData = this.processCategoricalData(launch, 'Faixa', 'FAIXA', 'faixa', 'Faixa A', 'Faixa B', 'Faixa C', 'Faixa D', 'Faixa E', 'Score', 'score', 'Pontua√ß√£o', 'pontua√ß√£o');
        if (faixaData.total > 0) {
          console.log(`üìä Processando faixa para ${launch['Lan√ßamento']}:`, faixaData);
          
          // Ordenar as faixas para melhor visualiza√ß√£o
          const sortedPercentages = {};
          const faixaOrder = ['A', 'B', 'C', 'D', 'E'];
          
          faixaOrder.forEach(faixa => {
            const faixaKey = Object.keys(faixaData.percentages).find(key => 
              key.includes(faixa) || key.toUpperCase().includes(faixa)
            );
            if (faixaKey) {
              sortedPercentages[faixaKey] = faixaData.percentages[faixaKey];
            }
          });
          
          // Adicionar outras faixas que n√£o est√£o na ordem padr√£o
          Object.keys(faixaData.percentages).forEach(key => {
            if (!Object.keys(sortedPercentages).includes(key)) {
              sortedPercentages[key] = faixaData.percentages[key];
            }
          });
          
          console.log(`üìä Faixas ordenadas para ${launch['Lan√ßamento']}:`, sortedPercentages);
          
          aggregatedData.faixaByLaunch.push({
            name: launch['Lan√ßamento'],
            ...sortedPercentages,
            totalLeads: faixaData.total
          });
        } else {
          console.log(`‚ö†Ô∏è Nenhum dado de faixa encontrado para ${launch['Lan√ßamento']}`);
          console.log(`üîç Headers dispon√≠veis:`, launch.sheetData?.headers);
          
          // Verificar se h√° alguma coluna que possa ser faixa
          if (launch.sheetData?.headers) {
            const possibleFaixaHeaders = launch.sheetData.headers.filter(header => 
              header.toLowerCase().includes('faixa') || 
              header.toLowerCase().includes('score') ||
              header.toLowerCase().includes('pontua√ß√£o') ||
              header.toLowerCase().includes('classifica√ß√£o')
            );
            console.log(`üîç Poss√≠veis colunas de faixa encontradas:`, possibleFaixaHeaders);
          }
        }

        // Processar dados de tr√°fego da planilha principal
        const trafficData = this.processMainSheetTrafficData(launch);
        if (trafficData.total > 0) {
          console.log(`üö¶ Processando tr√°fego da planilha principal para ${launch['Lan√ßamento']}:`, trafficData);
          
          aggregatedData.trafficByLaunch.push({
            name: launch['Lan√ßamento'],
            traffic: trafficData.total,
            trafficFormatted: this.formatCurrency(trafficData.total)
          });
        } else {
          console.log(`‚ö†Ô∏è Nenhum dado de tr√°fego encontrado na planilha principal para ${launch['Lan√ßamento']}`);
        }
      }
    });

    aggregatedData.leadsByLaunch.sort((a, b) => b.leads - a.leads);

    const getLaunchNumber = (launchName) => {
      const match = launchName.match(/(\d+)/);
      return match ? parseInt(match[1]) : 0;
    };

    if (aggregatedData.genderByLaunch.length > 0) {
      aggregatedData.genderByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    if (aggregatedData.ageByLaunch.length > 0) {
      aggregatedData.ageByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    if (aggregatedData.currentJobByLaunch.length > 0) {
      aggregatedData.currentJobByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    if (aggregatedData.salaryRangeByLaunch.length > 0) {
      aggregatedData.salaryRangeByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    if (aggregatedData.creditCardByLaunch.length > 0) {
      aggregatedData.creditCardByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    if (aggregatedData.programmingStudyByLaunch.length > 0) {
      aggregatedData.programmingStudyByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    if (aggregatedData.collegeByLaunch.length > 0) {
      aggregatedData.collegeByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    if (aggregatedData.onlineCourseByLaunch.length > 0) {
      aggregatedData.onlineCourseByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    if (aggregatedData.programmingInterestByLaunch.length > 0) {
      aggregatedData.programmingInterestByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    if (aggregatedData.eventInterestByLaunch.length > 0) {
      aggregatedData.eventInterestByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    if (aggregatedData.computerByLaunch.length > 0) {
      aggregatedData.computerByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    if (aggregatedData.faixaByLaunch.length > 0) {
      aggregatedData.faixaByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    if (aggregatedData.trafficByLaunch.length > 0) {
      aggregatedData.trafficByLaunch.sort((a, b) => getLaunchNumber(a.name) - getLaunchNumber(b.name));
    }

    console.log(`   üìä Dados de faixa processados: ${aggregatedData.faixaByLaunch.length}`);
    console.log(`   üö¶ Dados de tr√°fego processados: ${aggregatedData.trafficByLaunch.length}`);

    return aggregatedData;
  },

  processCategoricalData(launch, ...fieldNames) {
    const categories = {};
    let total = 0;

    const field = fieldNames.find(fieldName => launch.sheetData.headers.includes(fieldName));
    
    if (!field) {
      console.log(`üîç Campo n√£o encontrado para:`, fieldNames);
      console.log(`üîç Headers dispon√≠veis:`, launch.sheetData.headers);
      return { total: 0, percentages: {} };
    }

    console.log(`‚úÖ Campo encontrado: "${field}" para ${launch['Lan√ßamento']}`);

    launch.sheetData.data.forEach(lead => {
      if (lead[field]) {
        const value = lead[field].trim();
        if (value) {
          categories[value] = (categories[value] || 0) + 1;
          total++;
        }
      }
    });

    const percentages = {};
    Object.keys(categories).forEach(category => {
      percentages[category] = Number(((categories[category] / total) * 100).toFixed(1));
    });

    console.log(`üìä Categorias encontradas para "${field}":`, categories);
    console.log(`üìä Percentuais calculados:`, percentages);

    return { total, percentages };
  },

  processTrafficData(launch) {
    const categories = {};
    let total = 0;

    const trafficFields = ['Fonte', 'fonte', 'Source', 'source', 'Canal', 'canal'];
    const trafficField = trafficFields.find(field => launch.sheetData.headers.includes(field));
    
    if (!trafficField) {
      console.log(`üîç Campo de tr√°fego n√£o encontrado para ${launch['Lan√ßamento']}`);
      console.log(`üîç Headers dispon√≠veis:`, launch.sheetData.headers);
      return { total: 0, categories: {} };
    }

    console.log(`‚úÖ Campo de tr√°fego encontrado: "${trafficField}" para ${launch['Lan√ßamento']}`);

    launch.sheetData.data.forEach(lead => {
      if (lead[trafficField]) {
        const value = lead[trafficField].trim();
        if (value) {
          categories[value] = (categories[value] || 0) + 1;
          total++;
        }
      }
    });

    const percentages = {};
    Object.keys(categories).forEach(category => {
      percentages[category] = Number(((categories[category] / total) * 100).toFixed(1));
    });

    console.log(`üìä Categorias de tr√°fego encontradas para "${trafficField}":`, categories);
    console.log(`üìä Percentuais calculados:`, percentages);

    return { total, categories: percentages };
  },

  processMainSheetTrafficData(launch) {
    // Buscar dados de tr√°fego diretamente da planilha principal
    const trafficValue = launch['Tr√°fego'] || launch['Trafico'] || launch['tr√°fego'] || launch['trafico'];
    
    if (!trafficValue) {
      console.log(`üîç Campo de tr√°fego n√£o encontrado na planilha principal para ${launch['Lan√ßamento']}`);
      console.log(`üîç Colunas dispon√≠veis:`, Object.keys(launch));
      return { total: 0 };
    }

    console.log(`‚úÖ Campo de tr√°fego encontrado na planilha principal para ${launch['Lan√ßamento']}: "${trafficValue}"`);

    // Converter valor monet√°rio para n√∫mero
    let numericValue = 0;
    
    if (typeof trafficValue === 'string') {
      // Remover R$, pontos, v√≠rgulas e espa√ßos
      const cleanValue = trafficValue.replace(/[R$\s.]/g, '').replace(',', '.');
      numericValue = parseFloat(cleanValue);
    } else if (typeof trafficValue === 'number') {
      numericValue = trafficValue;
    }

    if (isNaN(numericValue) || numericValue <= 0) {
      console.log(`‚ö†Ô∏è Valor de tr√°fego inv√°lido para ${launch['Lan√ßamento']}: "${trafficValue}"`);
      return { total: 0 };
    }

    console.log(`üí∞ Valor de tr√°fego processado para ${launch['Lan√ßamento']}: R$ ${numericValue.toFixed(2)}`);

    return { total: numericValue };
  },

  formatCurrency(value) {
    if (typeof value !== 'number') {
      return value;
    }
    return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(value);
  },

  hasValidGenderData(launch) {
    if (!launch.sheetData || !launch.sheetData.data || launch.sheetData.data.length === 0) {
      return false;
    }

    const genderFields = ['O seu g√™nero:', 'O seu g√™nero', 'Sexo', 'sexo', 'G√™nero', 'g√™nero', 'Gender', 'gender', 'Genero', 'genero'];
    const genderField = genderFields.find(field => launch.sheetData.headers.includes(field));
    
    if (!genderField) {
      return false;
    }

    let hasValidData = false;
    for (const row of launch.sheetData.data) {
      if (row[genderField]) {
        hasValidData = true;
        break;
      }
    }

    return hasValidData;
  },

  hasValidAgeData(launch) {
    if (!launch.sheetData || !launch.sheetData.data || launch.sheetData.data.length === 0) {
      return false;
    }

    const ageFields = ['Qual a sua idade?', 'Qual a sua idade', 'Idade', 'idade', 'Age', 'age'];
    const ageField = ageFields.find(field => launch.sheetData.headers.includes(field));
    
    if (!ageField) {
      return false;
    }

    let hasValidData = false;
    for (const row of launch.sheetData.data) {
      if (row[ageField]) {
        hasValidData = true;
        break;
      }
    }

    return hasValidData;
  },

  clearCache() {
    console.log('üßπ Cache limpo - for√ßando recarregamento dos dados');
    cache.clear();
  }
};

export default leadScoringService;