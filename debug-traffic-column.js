// Script para identificar a coluna de tr√°fego na planilha principal
// Execute este script no console do navegador

console.log('üö¶ Verificando coluna de tr√°fego...');

// Fun√ß√£o para verificar a coluna de tr√°fego
function checkTrafficColumn() {
  console.log('üìã Verificando coluna de tr√°fego na planilha principal...');
  
  if (!allLaunchesData || !allLaunchesData.launches) {
    console.log('‚ùå Dados de lan√ßamentos n√£o encontrados');
    return null;
  }
  
  if (allLaunchesData.launches.length === 0) {
    console.log('‚ùå Nenhum lan√ßamento encontrado');
    return null;
  }
  
  // Pegar o primeiro lan√ßamento para an√°lise
  const firstLaunch = allLaunchesData.launches[0];
  console.log('üìä Primeiro lan√ßamento:', firstLaunch['Lan√ßamento']);
  
  // Listar todas as colunas
  const allColumns = Object.keys(firstLaunch);
  console.log('üìã Total de colunas:', allColumns.length);
  
  // Procurar por colunas relacionadas a tr√°fego
  const trafficColumns = allColumns.filter(column => {
    const lowerColumn = column.toLowerCase();
    return lowerColumn.includes('tr√°fego') || 
           lowerColumn.includes('trafico') || 
           lowerColumn.includes('gasto') ||
           lowerColumn.includes('investimento') ||
           lowerColumn.includes('facebook') ||
           lowerColumn.includes('google') ||
           lowerColumn.includes('ads') ||
           lowerColumn.includes('an√∫ncio') ||
           lowerColumn.includes('anuncio');
  });
  
  console.log('üö¶ Colunas relacionadas a tr√°fego:', trafficColumns);
  
  // Mostrar valores das colunas de tr√°fego
  trafficColumns.forEach(column => {
    const value = firstLaunch[column];
    console.log(`  ${column}: "${value}"`);
  });
  
  // Verificar se h√° valores num√©ricos
  const numericTrafficColumns = trafficColumns.filter(column => {
    const value = firstLaunch[column];
    if (!value) return false;
    
    // Tentar converter para n√∫mero
    const numValue = parseFloat(value.toString().replace(/[^\d,.-]/g, '').replace(',', '.'));
    return !isNaN(numValue) && numValue > 0;
  });
  
  console.log('üí∞ Colunas com valores num√©ricos de tr√°fego:', numericTrafficColumns);
  
  // Mostrar valores num√©ricos
  numericTrafficColumns.forEach(column => {
    const value = firstLaunch[column];
    const numValue = parseFloat(value.toString().replace(/[^\d,.-]/g, '').replace(',', '.'));
    console.log(`  ${column}: ${value} ‚Üí R$ ${numValue.toFixed(2)}`);
  });
  
  return {
    allTrafficColumns: trafficColumns,
    numericTrafficColumns: numericTrafficColumns
  };
}

// Fun√ß√£o para verificar todos os lan√ßamentos
function checkAllLaunchesTraffic() {
  console.log('üìä Verificando tr√°fego em todos os lan√ßamentos...');
  
  if (!allLaunchesData || !allLaunchesData.launches) {
    console.log('‚ùå Dados de lan√ßamentos n√£o encontrados');
    return;
  }
  
  const launchesWithTraffic = [];
  
  allLaunchesData.launches.forEach(launch => {
    const allColumns = Object.keys(launch);
    
    // Procurar por colunas relacionadas a tr√°fego
    const trafficColumns = allColumns.filter(column => {
      const lowerColumn = column.toLowerCase();
      return lowerColumn.includes('tr√°fego') || 
             lowerColumn.includes('trafico') || 
             lowerColumn.includes('gasto') ||
             lowerColumn.includes('investimento');
    });
    
    if (trafficColumns.length > 0) {
      const trafficData = {};
      let hasNumericValue = false;
      
      trafficColumns.forEach(column => {
        const value = launch[column];
        if (value) {
          const numValue = parseFloat(value.toString().replace(/[^\d,.-]/g, '').replace(',', '.'));
          if (!isNaN(numValue) && numValue > 0) {
            trafficData[column] = numValue;
            hasNumericValue = true;
          }
        }
      });
      
      if (hasNumericValue) {
        launchesWithTraffic.push({
          launch: launch['Lan√ßamento'],
          trafficData: trafficData
        });
      }
    }
  });
  
  console.log(`üìä Total de lan√ßamentos: ${allLaunchesData.launches.length}`);
  console.log(`üìä Lan√ßamentos com dados de tr√°fego: ${launchesWithTraffic.length}`);
  
  if (launchesWithTraffic.length > 0) {
    console.log('‚úÖ Primeiros 10 lan√ßamentos com dados de tr√°fego:');
    launchesWithTraffic.slice(0, 10).forEach(item => {
      console.log(`  - ${item.launch}:`, item.trafficData);
    });
  } else {
    console.log('‚ùå Nenhum lan√ßamento com dados de tr√°fego encontrado');
  }
  
  return launchesWithTraffic;
}

// Fun√ß√£o para testar com um lan√ßamento espec√≠fico
function testSpecificLaunchTraffic(launchName) {
  console.log(`üîç Testando tr√°fego do lan√ßamento: ${launchName}`);
  
  const launch = allLaunchesData.launches.find(l => l['Lan√ßamento'] === launchName);
  if (!launch) {
    console.log(`‚ùå Lan√ßamento "${launchName}" n√£o encontrado`);
    return null;
  }
  
  console.log('üìä Dados do lan√ßamento:', launch);
  
  // Listar todas as colunas com valores
  const allColumns = Object.keys(launch);
  console.log('üìã Colunas dispon√≠veis:', allColumns);
  
  // Procurar por colunas relacionadas a tr√°fego
  const trafficColumns = allColumns.filter(column => {
    const lowerColumn = column.toLowerCase();
    return lowerColumn.includes('tr√°fego') || 
           lowerColumn.includes('trafico') || 
           lowerColumn.includes('gasto') ||
           lowerColumn.includes('investimento');
  });
  
  console.log('üö¶ Colunas de tr√°fego encontradas:', trafficColumns);
  
  // Mostrar valores das colunas de tr√°fego
  trafficColumns.forEach(column => {
    const value = launch[column];
    if (value) {
      const numValue = parseFloat(value.toString().replace(/[^\d,.-]/g, '').replace(',', '.'));
      console.log(`  ${column}: "${value}" ‚Üí R$ ${numValue.toFixed(2)}`);
    } else {
      console.log(`  ${column}: (vazio)`);
    }
  });
  
  return {
    launch: launchName,
    trafficColumns: trafficColumns,
    trafficData: trafficColumns.reduce((acc, column) => {
      const value = launch[column];
      if (value) {
        const numValue = parseFloat(value.toString().replace(/[^\d,.-]/g, '').replace(',', '.'));
        if (!isNaN(numValue) && numValue > 0) {
          acc[column] = numValue;
        }
      }
      return acc;
    }, {})
  };
}

// Fun√ß√£o para formatar valor monet√°rio
function formatCurrency(value) {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL',
    minimumFractionDigits: 2
  }).format(value || 0);
}

// Executar verifica√ß√µes
console.log(`
üß™ INSTRU√á√ïES DE TESTE:

1. Verificar coluna de tr√°fego:
   - Execute: checkTrafficColumn()

2. Verificar todos os lan√ßamentos:
   - Execute: checkAllLaunchesTraffic()

3. Testar lan√ßamento espec√≠fico:
   - Execute: testSpecificLaunchTraffic('LF 15')

4. Executar todas as verifica√ß√µes:
   - Execute: runAllTrafficTests()
`);

// Fun√ß√£o para executar todas as verifica√ß√µes
function runAllTrafficTests() {
  console.log('üß™ Executando todas as verifica√ß√µes de tr√°fego...');
  
  console.log('\n=== VERIFICA√á√ÉO 1: Coluna de tr√°fego ===');
  const result = checkTrafficColumn();
  
  console.log('\n=== VERIFICA√á√ÉO 2: Todos os lan√ßamentos ===');
  const allLaunches = checkAllLaunchesTraffic();
  
  console.log('\n=== VERIFICA√á√ÉO 3: Lan√ßamento espec√≠fico ===');
  const specificLaunch = testSpecificLaunchTraffic('LF 15');
  
  console.log('\n‚úÖ Todas as verifica√ß√µes conclu√≠das!');
  
  if (result) {
    console.log('\nüéØ RESULTADO DA IDENTIFICA√á√ÉO:');
    console.log(`Colunas de tr√°fego encontradas: ${result.allTrafficColumns.length}`);
    console.log(`Colunas com valores num√©ricos: ${result.numericTrafficColumns.length}`);
  }
  
  if (allLaunches) {
    console.log(`\nüìä RESUMO: ${allLaunches.length} lan√ßamentos com dados de tr√°fego`);
  }
}

// Executar verifica√ß√£o inicial
checkTrafficColumn(); 